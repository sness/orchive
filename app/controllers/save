------------------------------ admin_controller.rb ------------------------------

  def index
    @years = Year.find(:all, :order => 'year')
  end
  
  #
  # Years
  #
  def edit_year
	@year = Year.find_by_id(params[:id]) || Year.new
	if request.post?
	  @year.attributes = params[:year]
	  if @year.save
		flash[:notice] = 'Year was successfully submitted.'
		redirect_to :action => 'index'
	  else
		flash[:notice] = 'Error in creating year.'
		render :action => 'edit_year'
	  end
	end
  end

  def destroy_year
    Year.destroy(params[:id])
    redirect_to :back
  end


------------------------------ recordings_controller.rb ------------------------------

  def index
    years = Year.find(:all)
    @year_array = Array.new()
    years.each do |n|
      a = n.name
      b = Recording.count(:all, :conditions => { :year => n.name })
      year_array.push([a,b])
    end
    @recordings = Recording.find(:all, :order => "year")
  end


------------------------------ recordings_controller.rb ------------------------------

  def year
    @recordings = Recording.find_all_by_year(params[:id])
    @current_year = params[:id]
  end


------------------------------ orchive_controller.rb ------------------------------

  before_filter :get_leftnav_years

  def get_leftnav_years
    @leftnav_years = Year.find(:all)
    @leftnav_recordings = Recording.find_all_by_year(params[:id], :order => 'tape + 0')
    @leftnav_current_year = params[:id]
  end


    years = Year.find(:all)
    @year_array = Array.new()
    years.each do |n|
      a = n.name
      b = Recording.count(:all, :conditions => { :year => n.name })
      @year_array.push([a,b])
    end


  def index
    years = Year.find(:all)
    @year_array = Array.new()
    years.each do |n|
      a = n.name
      b = Recording.count(:all, :conditions => { :year => n.name })
      @year_array.push([a,b])
    end
  end


------------------------------ annotations_controller.rb ------------------------------

  def show
    @annotation = Annotation.find(params[:id])
    a = "500000,1000000,label1\n1100000,1500000,label2\n1700000,2000000,label3\n"
    render :text => a
  end



------------------------------ recordings_controller.rb ------------------------------

** Mon Jun 01 2009 - 10:26:15 AM
   -----------------------------

Before refactoring to make an Annotation a single entity.

  def annotations
    annotations = Recording.find(params[:id]).annotations
    output = ""
    annotations.each do |n|
      output += n.to_string + "\n"
    end
    render :text => output
  end


------------------------------ recordings_controller.rb ------------------------------

  #
  # Return a text description of the annotations associated with this
  # recording, for use by OrcaAnnotator
  #
  # sness - We might want to look at the request format for this, and
  # return HTML/XML/JSON, but this is all we need for now.
  #
  def annotations
    render :text => Recording.find(params[:id]).annotations[0]
  end

  def predictions
    render :text => Recording.find(params[:id]).annotations[0]
  end


------------------------------ annotations_controller.rb ------------------------------

  # Receive updated annotations from the web server
  def update
    errors = []
    # The output file from the server is in the params[:annotations] hash
    annotations = params[:annotations]
    # Split the file into lines
    annotations.split("\n").each do |n|
      # Split the line into fields
      fields = n.split(",")o
      ann_id = fields[0]
      ann_left_ms = fields[1].to_i
      ann_right_ms = fields[2].to_i
      ann_name = fields[3]
      ann = Annotation.find_or_create_by_id(ann_id)
      ann.start_time_ms = ann_left_ms
      ann.end_time_ms = ann_right_ms
      ann.name = ann_name
      if !ann.save
        errors << "(error in saving annotation_id #{ann_id})";
      end
    end

    render :text => "update complete " + errors.to_s
      
  end


------------------------------ annotations_controller.rb ------------------------------

** Fri Jul 24 2009 - 13:54:48 PM
   -----------------------------

After making each annotation it's own row in a table

  def show
    render :text => Annotation.find(params[:id]).data
  end


------------------------------ labbooks_controller.rb ------------------------------

  def add_labbook_page_to_recording
    puts "********** session[:current_recording]=#{session[:current_recording]}"
    if session[:current_recording] != ""
      recording = Recording.find(session[:current_recording])
      labbook_page = LabbookPage.find(params[:id])
      recording.labbook_pages << labbook_page
      recording.save!
      flash[:notice] = "Successfully added labbook page to recording"
      session[:last_labbook_page] = params[:id]
      puts "***** setting last_labbook_page (#{session[:last_labbook_page]})=(#{params[:id]})"
#      session[:last_labbook] = params[:labbook]
      redirect_to :controller => 'recordings', :action => 'show', :id => session[:current_recording]
    else 
      flash[:notice] = "You are trying to set a lab book page but haven't yet chosen a recording."
      redirect_to :back
    end

  end


------------------------------ classifier_controller.rb ------------------------------

    # Find just the recordings with at least one annotation
    @recordings = Recording.find :all, :joins => "INNER JOIN annotations ON annotations.recording_id = recordings.id", :select => "recordings.*, count(annotations.id) annotations_count", :group => "annotations.recording_id HAVING annotations_count > 0"


------------------------------ recordings_controller.rb ------------------------------

  def edit_labbook_page_recordings
    session[:current_recording] = params[:id]
     puts "********** session[:last_labbook_page]=(#{session[:last_labbook_page]})"    
#      puts "********** session[:last_labbook]=(#{session[:last_labbook]})"    
#     pp session[:last_labbook_page]
#    if (session[:last_labbook_page] != "")
    if (!session[:last_labbook_page].nil? && session[:last_labbook_page] != "")
#    if (!session[:last_labbook].nil? && session[:last_labbook] != "")
#      redirect_to "/labbooks/show_labbook_page/#{session[:last_labbook]}"
#      next_page = session[:last_labbook_page].to_i + 1
#      redirect_to "/labbooks/show_labbook_page/#{next_page}"
      redirect_to "/labbooks/show_labbook_page/#{session[:last_labbook_page]}"
     puts "*** HERE ***"
#      redirect_to "/labbooks/show/#{session[:last_labbook]}"
    else
      redirect_to :controller => 'labbooks', :action => 'index'
    end
  end


------------------------------ labbooks_controller.rb ------------------------------

  def add_labbook_page_to_recording
    if session[:current_recording] != ""
      recording = Recording.find(session[:current_recording])
      labbook_page = LabbookPage.find(params[:id])
      recording.labbook_pages << labbook_page
      recording.save!
      flash[:notice] = "Successfully added labbook page to recording"
      session[:last_labbook_page] = params[:id]
      redirect_to :controller => 'recordings', :action => 'show', :id => session[:current_recording]
    else 
      flash[:notice] = "You are trying to set a lab book page but haven't yet chosen a recording."
      redirect_to :back
    end
  end


------------------------------ recordings_controller.rb ------------------------------

** Tue Apr 20 2010 - 02:52:10 AM
   -----------------------------

class RecordingsController < ApplicationController

  include AuthenticatedSystem
  before_filter :login_from_cookie
#  before_filter :get_leftnav_years

  def get_leftnav_years
    @leftnav_years = Year.find(:all)
    @leftnav_recordings = Recording.find_all_by_year(params[:id], :order => 'tape + 0')
    @leftnav_current_year = params[:id]
  end

  def index
    years = Year.find(:all)
    @year_array = Array.new()
    years.each do |n|
      a = n.name
      b = Recording.count(:all, :conditions => { :year => n.name })
      @year_array.push([a,b])
    end
  end

  def show
    @recording = Recording.find(params[:id])
    # sness - Need to change this to just get the annotation for this user
    @annotations = @recording.annotations
    @visualizations = @recording.visualizations
    @predictions = @recording.predictions
    @users = @recording.users
    
    @call_array = []

    calls = Call.find(:all)
    @call_names = []
    calls.each do |call|
      if !@call_names.include?(call.name)
        @call_names << call.name
      end
    end

    @call_names.each do |call_name|
      a = []
      calls.each do |call|
        if call.name == call_name
          a << call
        end
      end
      @call_array << a
    end

    # Calculate maximums
    @max_call_names = 0
    @call_array.each do |row|
      if row.size > @max_call_names
        @max_call_names = row.size
      end
    end

    
    last = params[:id].to_i - 1
    if (last > 0)
      puts "************** last=#{last} *************"
      @prev_recording = Recording.find(last)
    end

    # Set mediaserver defaults to "get from main Orchive server"
    @current_user_mediaserver_url = ""
    @current_user_mediaserver_active = 0

    if current_user == :false || !current_user.can_annotate
      @current_annotation_user_id = -1
    else
      @current_annotation_user_id = current_user.id
      # Check if the current user gets their data through a mediaserver
      if current_user.mediaserver_active
        @current_user_mediaserver_active = 1
        @current_user_mediaserver_url = current_user.mediaserver_url
      else
        @current_user_mediaserver_active = 0
      end
    end
    @current_user_id = current_user.id

    @user_comments = RecordingComments.find(:first, :conditions => {:recording_id => params[:id], :user_id => current_user.id})
    @all_comments = RecordingComments.find(:all, :conditions => {:recording_id => params[:id]})
  end

  def upload_comments
    comments = RecordingComments.find(:first, :conditions => {:recording_id => params[:id], :user_id => params[:user_id]}) || RecordingComments.new
    comments.text = params[:comments]
    comments.recording_id = params[:id]
    comments.user_id = params[:user_id]
    comments.save!
                                      
    puts "********** upload_comments"
    redirect_to :back
  end

  def get_annotations
    @recording = Recording.find(params[:id])
    @annotations = @recording.annotations
    render :partial => 'annotation_table', :layout => false
  end

  def annotations
    annotations = Recording.find(params[:id]).user_annotations(params[:user_id])
    output = ""
    annotations.each do |n|
      output += n.to_string + "\n"
    end
    render :text => output
  end

  def audacity_annotations
    annotations = Recording.find(params[:id]).annotations
    output = ""
    annotations.each do |n|
      output += n.to_audacity
    end
    render :text => output
  end

  def find
    year = params[:year]

    params[:tape] =~ /([0-9]*)([A-B]*)/
    tape = $1
    side = $2

    # Try looking for the whole string
    r = Recording.find(:first, :conditions => {:year => year, :tape => tape, :side => side})

    # If we couldn't find anything, try just searching for the tape
    if (r.nil?)
      r = Recording.find(:first, :conditions => {:year => year, :tape => tape})
    end

    # If we couldn't find anything, try just searching for the year
    if (r.nil?)
      r = Recording.find(:first, :conditions => {:year => year})
    end


    if (r.nil?)
      redirect_to :action => 'show', :id => 1
    else
      redirect_to :action => 'show', :id => r.id
    end
  end

  def edit_time
    @recording = Recording.find(params[:id])
    if request.post?

      # Remember this time setting action
      # sness - Do this better in the future
      year = params[:recording]["start_time(1i)"]
      month = params[:recording]["start_time(2i)"]
      day = params[:recording]["start_time(3i)"]
      hour = params[:recording]["start_time(4i)"]
      minute = params[:recording]["start_time(5i)"]
      time = Time.gm(year,month,day,hour,minute)
      rst = RecordingStartTime.new(:recording_id => params[:id], 
                                   :user_id => current_user.id,
                                   :start_time => time)
      rst.save!

      @recording.attributes = params[:recording]
      if @recording.save!
        flash[:notice] = 'Recording was successfully submitted.'
        redirect_to :action => 'show', :id => params[:id]
      else
        flash[:notice] = 'Error in changing time.'
        render :action => 'edit_time', :id => params[:id]
      end
    end
  end

  def edit_labbook_page_recordings
    session[:current_recording] = params[:id]
    if (!session[:last_labbook_page].nil? && session[:last_labbook_page] != "")
      redirect_to "/labbooks/show_labbook_page/#{session[:last_labbook_page]}"
    else
      redirect_to :controller => 'labbooks', :action => 'index'
    end
  end


  ################################################################################
  ################################################################################
  ################################################################################



  def year
    @recordings = Recording.paginate :page => params[:page], :per_page => 200, :order => 'tape + 0', :conditions => { :year => params[:id] }
#    @recordings = Recording.find_all_by_year(params[:id])
    @current_year = params[:id]
  end


  #
  # Assets for orcasimplefftplay.swf
  #

  # mp3 asset for orcaannotator.swf
  def mp3_for_annotator
    @recording = Recording.find(params[:id])
    respond_to do |format|
      format.mp3 { 
        send_file RAILS_ROOT + "/public/" + @recording.mp3_audio_file_path
      }
    end
  end

  # waveform png asset for orcaannotator.swf
  def waveform_for_annotator
    @recording = Recording.find(params[:id])
    respond_to do |format|
      format.jpg { 
        send_file RAILS_ROOT + "/public/images/" + @recording.waveform_image_file_path
      }
    end
  end

  # spectrogram png asset for orcaannotator.swf
  def spectrogram_for_annotator
    @recording = Recording.find(params[:id])
    respond_to do |format|
      format.jpg { 
        send_file RAILS_ROOT + "/public/images/" + @recording.spectrogram_image_file_path
      }
    end
  end


  #
  # Predictions
  #
  def predictions
    predictions = Recording.find(params[:id]).user_predictions(params[:user_id])
    output = ""
    predictions.each do |n|
      output += n.to_string + "\n"
    end
    render :text => output
  end

end
